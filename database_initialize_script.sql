--AUTHOR: BENJAMIN EDELSTEIN--

--REMOVE ALL TABLES--
drop table policies;
drop table properties;
drop table quotes;
drop table HomeownerInfos;
drop table Locations;
drop table Logins;

--LOGINS TABLE--
create table LOGINS(
USER_NAME VARCHAR2(19 CHAR)PRIMARY KEY, --UNIQUE NOT NULL
USER_PWD VARCHAR2(19 CHAR) NOT NULL,
CONSTRAINT LOGINS_USER_NAME_AND_PASSWORD_ALPHANUMERIC_CK CHECK( --USER_NAME and USER_PWD must be alphanumeric
NOT REGEXP_LIKE(CONCAT(USER_NAME,USER_PWD), '[^A-Za-z0-9]')),
ADMIN_ROLE VARCHAR2(5 CHAR) DEFAULT 'User' NOT NULL,--ADMIN_ROLE is either USER or ADMIN
CONSTRAINT LOGINS_ADMIN_ROLE_CK CHECK(ADMIN_ROLE IN ('Admin', 'User'))
);

--LOCATIONS TABLE--
create table LOCATIONS(
QUOTE_ID NUMERIC GENERATED ALWAYS AS IDENTITY(START WITH 1 INCREMENT BY 1) PRIMARY KEY,--Auto Generated Identity
RESIDENCE_TYPE VARCHAR2(18 CHAR) NOT NULL,--Check Residence Type matches values
CONSTRAINT LOCATIONS_RESIDENCETYPE_CK CHECK(RESIDENCE_TYPE IN ('Single-Family Home', 'Condo', 'Townhouse', 'Rowhouse', 'Duplex', 'Apartment')),
ADDRESS_LINE_1 NVARCHAR2(49) NOT NULL,
ADDRESS_LINE_2 NVARCHAR2(99) DEFAULT NULL,--Check both addresses are alphanumeric
CONSTRAINT LOCATIONS_ADDRESS_ALPHANUMERIC_CK CHECK( --ADDRESS_LINE_1 and ADDRESS_LINE_2 must be alphanumeric and ',-/. '
NOT REGEXP_LIKE(CONCAT(ADDRESS_LINE_1,ADDRESS_LINE_2), 
'[^A-Za-z0-9,-/. ]')),
CITY VARCHAR2(14 CHAR) NOT NULL,
STATE VARCHAR2(14 CHAR) NOT NULL,--check both are strictly alphanumeric and space
CONSTRAINT LOCATIONS_CITY_STATE_ALPHANUMERIC_CK CHECK( --CITY and STATE must be alphanumeric and space
NOT REGEXP_LIKE(CONCAT(CITY,STATE), 
'[^A-Za-z0-9 ]')),
ZIP VARCHAR2(9 CHAR) NOT NULL,
CONSTRAINT LOCATIONS_ZIP_LENGTH_CK CHECK(LENGTH(ZIP)=5 OR LENGTH(ZIP)=9), --ZIP must be 5 or 9 digits (NO DASH STORED)
CONSTRAINT LOCATIONS_ZIP_NUMERIC_CK CHECK(NOT REGEXP_LIKE(ZIP, '[^0-9]')),--ZIP must be numeric
RESIDENCE_USE VARCHAR2(15 CHAR) NOT NULL,--RESIDENCE_USE must match values
CONSTRAINT LOCATIONS_RESIDENCE_USE_CK CHECK(RESIDENCE_USE IN ('Primary', 'Secondary', 'Rental Property')),
USER_NAME VARCHAR2(19 CHAR) NOT NULL,--USER_NAME is a foreign key, must match datatype
CONSTRAINT LOCATIONS_USER_NAME_FK FOREIGN KEY (USER_NAME) REFERENCES LOGINS(USER_NAME)
);

--HomeownerInfos Table--
CREATE TABLE HOMEOWNERINFOS(
QUOTE_ID NUMERIC NOT NULL,--QUOTE_ID is foreign key, must match data type
CONSTRAINT HOMEOWNERINFOS_QUOTE_ID_FK FOREIGN KEY (QUOTE_ID) REFERENCES LOCATIONS(QUOTE_ID),
FIRST_NAME VARCHAR2(30 CHAR) NOT NULL,
LAST_NAME VARCHAR2(30 CHAR) NOT NULL,--These must be alphanumeric
CONSTRAINT HOMEOWNERINFOS_FIRST_NAME_LAST_NAME_ALPHANUMERIC_CK CHECK( --FIRST_NAME and LAST_NAME must be alphanumeric
NOT REGEXP_LIKE(CONCAT(FIRST_NAME, LAST_NAME), '[^A-Za-z0-9]')),
DOB CHAR(10 CHAR) NOT NULL,--check that date is stored in format yyyy-mm-dd
CONSTRAINT HOMEOWNERINFOS_DOB_FORMAT_CK CHECK(--check that date string is correct format
REGEXP_LIKE(DOB, '^[0-9]{4}-[0-9]{2}-[0-9]{2}') AND LENGTH(DOB)=10),
IS_RETIRED VARCHAR2(3 CHAR) NOT NULL,
CONSTRAINT HOMEOWNERINFOS_IS_RETIRED_CK CHECK(IS_RETIRED IN ('Yes','No')),
SSN VARCHAR2(9 CHAR) NOT NULL,--check that SSN is 9 numeric digits
CONSTRAINT HOMEOWNERINFOS_SSN_NUMERIC_CK CHECK( --SSN must be numeric and length of 9
NOT REGEXP_LIKE(SSN, '[^0-9]') AND LENGTH(SSN)=9),
EMAIL_ADDRESS VARCHAR2(50 CHAR)NOT NULL,--check email format
CONSTRAINT HOMEOWNERINFOS_EMAIL_ADDRESS_FORMAT_CK CHECK(--email must have alphabetical first charater, then alphanumeric or '.'
REGEXP_LIKE (EMAIL_ADDRESS, --then @ followed by alphanumeric '.' and/or '-', then a '.' followed by between 2 and 4 alphanumeric characters
'^[A-Za-z]+[A-Za-z0-9.]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}$'))
);

--Checks that DOB is at least 18 years earlier--
CREATE OR REPLACE TRIGGER HOMEOWNERINFOS_DOB_CK 
BEFORE INSERT OR UPDATE ON HOMEOWNERINFOS
FOR EACH ROW
BEGIN
IF(TO_DATE(:new.DOB, 'YYYY-MM-DD') > ADD_MONTHS(SYSDATE, -216))
THEN RAISE_APPLICATION_ERROR(-20001, 'Cannot do business with a client under the age of 18');
END IF;
END;
/

--QUOTES TABLE--
CREATE TABLE QUOTES(
QUOTE_ID NUMERIC PRIMARY KEY,--Foreign key must match datatype
CONSTRAINT QUOTES_QUOTE_ID_FK FOREIGN KEY(QUOTE_ID) REFERENCES LOCATIONS(QUOTE_ID),
PREMIUM NUMBER(10, 2) NOT NULL,--2 decimal value up to 10 digits
DWELLING_COVERAGE NUMBER(10, 2) NOT NULL,--2 decimal value up to 10 digits
DETACHED_STRUCTURE NUMBER(10, 2) NOT NULL,--2 decimal value up to 10 digits
PERSONAL_PROPERTY NUMBER(10, 2) NOT NULL,--2 decimal value up to 10 digits
ADDNL_LIVING_EXPENSE NUMBER(10, 2) NOT NULL,--2 decimal value up to 10 digits
MEDICAL_EXPENSE NUMBER(10, 2) NOT NULL,--2 decimal value up to 10 digits
DEDUCTIBLE NUMBER(10, 2) NOT NULL--2 decimal value up to 10 digits
);

--PROPERTIES TABLE--
CREATE TABLE PROPERTIES(
QUOTE_ID NUMERIC NOT NULL,--Foreign key must match datatype
CONSTRAINT PROPERTIES_QUOTE_ID_FK FOREIGN KEY (QUOTE_ID) REFERENCES LOCATIONS(QUOTE_ID),
MARKET_VALUE NUMBER(8) NOT NULL, --number up to 8 digits
CONSTRAINT PROPERTIES_MARKET_VALUE_CK CHECK(MARKET_VALUE BETWEEN 10000 AND 10000000),
YEAR_BUILT NUMBER(4) NOT NULL, --number up to 4 digits
SQUARE_FOOTAGE NUMBER(4) NOT NULL, --number up to 4 digits
CONSTRAINT PROPERTIES_SQUARE_FOOTAGE_CK CHECK(SQUARE_FOOTAGE BETWEEN 300 AND 4000),
DWELLING_STYLE NUMBER(2,1) NOT NULL, --number up to 2 digits 1 precision 1 scale
CONSTRAINT PROPERTIES_DWELLING_STYLE_CK CHECK(DWELLING_STYLE IN(1, 1.5, 2, 2.5, 3)),
ROOF_MATERIAL VARCHAR2(8 CHAR) NOT NULL,
CONSTRAINT PROPERTIES_ROOF_MATERIAL_CK CHECK(ROOF_MATERIAL IN ('Concrete', 'Clay', 'Rubber', 'Steel', 'Tin', 'Wood')),
GARAGE_TYPE VARCHAR2(8 CHAR) NOT NULL,
CONSTRAINT PROPERTIES_GARAGE_TYPE_CK CHECK(GARAGE_TYPE IN ('Attached', 'Detached', 'Basement', 'Builtin', 'None')),
NUM_FULL_BATHS NUMBER(1) NOT NULL, --number up to 1 digits
CONSTRAINT PROPERTIES_NUM_FULL_BATHS_CK CHECK(NUM_FULL_BATHS BETWEEN 1 AND 8),
NUM_HALF_BATHS NUMBER(1) NOT NULL, --number up to 1 digits
CONSTRAINT PROPERTIES_NUM_HALF_BATHS_CK CHECK(NUM_HALF_BATHS BETWEEN 0 AND NUM_FULL_BATHS/2),
HAS_SWIMMING_POOL VARCHAR2(5 CHAR) DEFAULT 'FALSE' NOT NULL,
CONSTRAINT PROPERTIES_HAS_SWIMMING_POOL_CK CHECK (HAS_SWIMMING_POOL IN ('true', 'false'))
);

--Checks that Year_Built is between 1950 and today--
CREATE OR REPLACE TRIGGER PROPERTIES_YEAR_BUILT_CK 
BEFORE INSERT OR UPDATE ON PROPERTIES
FOR EACH ROW
BEGIN
IF(NOT (:new.YEAR_BUILT BETWEEN 1950 AND TO_NUMBER(TO_CHAR(SYSDATE, 'YYYY'))))
THEN RAISE_APPLICATION_ERROR(-20001, 'Invalid age of a property');
END IF;
END;
/

--POLICIES TABLE--
CREATE TABLE POLICIES(
POLICY_KEY VARCHAR2(10 CHAR) NOT NULL,
QUOTE_ID NUMERIC NOT NULL,
CONSTRAINT POLICIES_QUOTE_ID_FK FOREIGN KEY (QUOTE_ID) REFERENCES LOCATIONS(QUOTE_ID),
CONSTRAINT POLICIES_POLICY_KEY_QUOTE_ID_PK PRIMARY KEY (POLICY_KEY, QUOTE_ID),
POLICY_EFFECTIVE_DATE VARCHAR2(10 CHAR) NOT NULL,--check that date is stored in format yyyy-mm-dd
CONSTRAINT POLICIES_POLICY_EFFECTIVE_DATE_FORMAT_CK CHECK(--check that date string is correct format
REGEXP_LIKE(POLICY_EFFECTIVE_DATE, '^[0-9]{4}-[0-9]{2}-[0-9]{2}')),
POLICY_END_DATE VARCHAR2(10 CHAR) NOT NULL,--check that date is stored in format yyyy-mm-dd
CONSTRAINT POLICIES_POLICY_END_DATE_FORMAT_CK CHECK(--check that date string is correct format
REGEXP_LIKE(POLICY_END_DATE, '^[0-9]{4}-[0-9]{2}-[0-9]{2}')),
CONSTRAINT POLICIES_DATE_CK CHECK( POLICY_EFFECTIVE_DATE <= POLICY_END_DATE ),
POLICY_TERM VARCHAR2(3 CHAR) NOT NULL,
CONSTRAINT POLICIES_POLICY_TERM_CK CHECK (POLICY_TERM > 0), --Can't have a policy for 0 terms
POLICY_STATUS VARCHAR2(9 CHAR) NOT NULL,
CONSTRAINT POLICIES_POLICY_STATUS_CK CHECK(POLICY_STATUS IN ('ACTIVE', 'RENEWED', 'CANCELLED'))
);

--Checks that Policy_Effective_Date is between today and 60 days from now--
CREATE OR REPLACE TRIGGER POLICIES_DATE_CK 
BEFORE INSERT ON POLICIES
FOR EACH ROW
BEGIN
IF(:new.POLICY_EFFECTIVE_DATE NOT BETWEEN TO_CHAR(SYSDATE, 'YYYY-MM-DD') AND TO_CHAR(SYSDATE+60, 'YYYY-MM-DD'))
THEN RAISE_APPLICATION_ERROR(-20001, 'Invalid policy date: Must be between today and 60 days from now.');
END IF;
END;
/

set define on
--CREATE NEW ADMIN ON TABLESPACE SETUP
INSERT INTO LOGINS VALUES ('&1', '&2', 'Admin');
INSERT INTO LOGINS VALUES ('&3', '&4', 'User');
set define off

commit;